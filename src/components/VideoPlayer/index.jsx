import React, { useState } from 'react';
import './VideoPlayer.css';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube –∏ RuTube
 * 
 * @param {string} src - URL –≤–∏–¥–µ–æ –∏–ª–∏ ID
 * @param {string} platform - 'youtube' –∏–ª–∏ 'rutube'
 * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ
 * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ
 * @param {string} width - –®–∏—Ä–∏–Ω–∞ –ø–ª–µ–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '100%')
 * @param {string} height - –í—ã—Å–æ—Ç–∞ –ø–ª–µ–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '315px')
 * @param {boolean} autoplay - –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)
 * @param {string} startTime - –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è YouTube)
 * @param {boolean} showControls - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * @param {string} caption - –ü–æ–¥–ø–∏—Å—å –ø–æ–¥ –≤–∏–¥–µ–æ
 */
const VideoPlayer = ({
  src,
  platform = 'youtube',
  title = '–û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ',
  description,
  width = '100%',
  height = '315px',
  autoplay = false,
  startTime,
  showControls = true,
  caption,
  className = '',
}) => {
  const [isLoaded, setIsLoaded] = useState(false);
  const [hasError, setHasError] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –≤–∏–¥–µ–æ –∏–∑ URL
  const extractVideoId = (url, platform) => {
    if (!url) return '';

    if (platform === 'youtube') {
      // –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã YouTube URL
      const patterns = [
        /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/,
        /^([a-zA-Z0-9_-]{11})$/, // –ü—Ä—è–º–æ–π ID
      ];

      for (const pattern of patterns) {
        const match = url.match(pattern);
        if (match) return match[1];
      }
    } else if (platform === 'rutube') {
      // –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã RuTube URL
      const patterns = [
        /rutube\.ru\/video\/([a-f0-9]+)/,
        /rutube\.ru\/embed\/([a-f0-9]+)/,
        /^([a-f0-9]+)$/, // –ü—Ä—è–º–æ–π ID
      ];

      for (const pattern of patterns) {
        const match = url.match(pattern);
        if (match) return match[1];
      }
    }

    return url; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
  const generateEmbedUrl = () => {
    const videoId = extractVideoId(src, platform);
    
    if (platform === 'youtube') {
      let embedUrl = `https://www.youtube.com/embed/${videoId}`;
      const params = new URLSearchParams();
      
      if (autoplay) params.append('autoplay', '1');
      if (startTime) params.append('start', startTime);
      if (!showControls) params.append('controls', '0');
      params.append('rel', '0'); // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ –≤–∏–¥–µ–æ
      params.append('modestbranding', '1'); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—Ä–µ–Ω–¥–∏–Ω–≥ YouTube
      
      const queryString = params.toString();
      return queryString ? `${embedUrl}?${queryString}` : embedUrl;
    } else if (platform === 'rutube') {
      let embedUrl = `https://rutube.ru/play/embed/${videoId}`;
      const params = new URLSearchParams();
      
      if (autoplay) params.append('autoplay', 'true');
      
      const queryString = params.toString();
      return queryString ? `${embedUrl}?${queryString}` : embedUrl;
    }
    
    return src;
  };

  const handleLoad = () => {
    setIsLoaded(true);
    setHasError(false);
  };

  const handleError = () => {
    setIsLoaded(false);
    setHasError(true);
  };

  const embedUrl = generateEmbedUrl();

  const containerClasses = [
    'video-player-container',
    `video-player-${platform}`,
    className,
  ].filter(Boolean).join(' ');

  return (
    <figure className={containerClasses}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
      {(title || description) && (
        <div className="video-header">
          {title && <h4 className="video-title">{title}</h4>}
          {description && <p className="video-description">{description}</p>}
        </div>
      )}

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä–∞ */}
      <div 
        className="video-wrapper"
        style={{ 
          width,
          paddingBottom: height === '315px' ? '56.25%' : undefined, // 16:9 aspect ratio
          height: height !== '315px' ? height : undefined,
        }}
      >
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {!isLoaded && !hasError && (
          <div className="video-loading">
            <div className="loading-spinner"></div>
            <span>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...</span>
          </div>
        )}

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
        {hasError && (
          <div className="video-error">
            <div className="error-icon">üé•</div>
            <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ</p>
            <small>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL: {src}</small>
            <small>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}</small>
          </div>
        )}

        {/* Iframe —Å –≤–∏–¥–µ–æ */}
        <iframe
          src={embedUrl}
          title={title}
          frameBorder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowFullScreen
          onLoad={handleLoad}
          onError={handleError}
          className={`video-iframe ${isLoaded ? 'loaded' : ''}`}
          loading="lazy"
        />

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ */}
        <div className="video-platform-badge">
          {platform === 'youtube' && (
            <span className="platform-youtube">YouTube</span>
          )}
          {platform === 'rutube' && (
            <span className="platform-rutube">RuTube</span>
          )}
        </div>
      </div>

      {/* –ü–æ–¥–ø–∏—Å—å –ø–æ–¥ –≤–∏–¥–µ–æ */}
      {caption && (
        <figcaption className="video-caption">
          {caption}
        </figcaption>
      )}

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="video-info">
        <small className="video-source">
          –ò—Å—Ç–æ—á–Ω–∏–∫: {platform === 'youtube' ? 'YouTube' : 'RuTube'}
        </small>
        {startTime && platform === 'youtube' && (
          <small className="video-start-time">
            –ù–∞—á–∞–ª–æ: {Math.floor(startTime / 60)}:{(startTime % 60).toString().padStart(2, '0')}
          </small>
        )}
      </div>
    </figure>
  );
};

export default VideoPlayer;